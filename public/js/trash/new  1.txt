//"use strict"
/*!
keleborn.mail@gmail.com

(c) 2015 Anton Kosiak <keleborn.mail [at] gmail.com>
The library ICD of World Health Organization not under the MIT license :
https://who.com
*/
//status = window.jQuery ? 'OK' : 'NO';	console.log('-= jQuery is ' + status + ' =-')

//-------------- VARS

/*! version - main sign for update && BD = true || false in BD()*/
//var version = "0.0.6";
/*var Lang = {
	lang : "uk",
	version : "0.1",
	uk : {
		NAME : "українська",
		VERSION : "0.1"
	},
	ru : {
		NAME : "русский",
		VERSION : "0.0"
	}
}*//*
var ICD = {
	number : 10,
	lang : "uk"
};*/
var version = {},
	Lang = {},
	ICD = {},
	classes = [], blocks = [], diagnoses = [], nosologies = [],
	APP = {
		width1 : 0,
		width2 : 0,
		stepCatalog : 0
	}

//-------------- Var Easy Functions
var byID = function(id){return document.getElementById(id)},
	parse = function(json){return json != "undefined" ? JSON.parse(json) : ""},
	encode = function(json){return JSON.stringify(json)},
	//log = function(arg){return console.log(arguments)},
	log = function(){try {return console.log.apply(console, arguments);} catch (_error) {} },
	timer = function (callback, time){setTimeout(callback, time)},
	storage = localStorage;
	log(1)
//Object.prototype.text = function (text){return text !== undefined ? this.innerHTML = text : this.innerHTML};
//Object.prototype.val = function (val){e = this; return text !== undefined ? this.options[e.selectedIndex].value = val : this.options[e.selectedIndex].val};
/*HTMLDivElement.prototype.setAttributes = function (attrs){
	for(var key in attrs) {
		this.setAttribute(key, attrs[key]);
	}
}
function setAttributes(el, attrs){
	for(var key in attrs) {
		el.setAttribute(key, attrs[key]);
	}
}*/

//-------------- Modules
var preloaderXHR;
if (!preloaderXHR) preloaderXHR = {};
preloaderXHR = {
	div : "loadingList",
	counter : 0,
	allow : false,
	add : function(file, text){
		preloaderXHR.counter++;
		preloaderXHR.allow = false;
		preloaderXHR .loadingFile(file, text);
		/*console.log(req.readyState);
		req.onreadystatechange = function(){
			console.log(this);
			if (this.readyState == 4 && this.status == 200){
				console.log("1 done");
				preloaderXHR.counter--;
				if (preloaderXHR.counter == 0)
					preloaderXHR.allow = true;
			}
			console.log(preloaderXHR.counter, preloaderXHR.allow);
		}*/
	},
	change : function(xhr, callback){
		if(xhr.readyState === 3){
			//console.log(xhr.responseURL, 'loading')
			preloaderXHR.loadingFile(xhr.responseURL);
		}
		if(xhr.readyState === 4){
			if(xhr.status === 200){
				preloaderXHR.counter--;
				if (preloaderXHR.counter == 0)
					preloaderXHR.allow = true;
			}
		}
		if (callback)
			callback.apply();
	},
	check : function(callback, checkAllow){
		//console.log(preloaderXHR.allow);
		/*if (callback)
			if(checkAllow && checkAllow === true)
				if(preloaderXHR.allow == true)
					callback.apply();
			else
				callback.apply();
		else
			return preloaderXHR.allow;*/
		if (preloaderXHR.counter == 0)
			preloaderXHR.allow = true;
		return preloaderXHR.allow;
	},
	loadingFile : function(file, text){
		console.log("loading: " + file, text);
		$li = '<li data-file="' + file + '" >"' + file + '.json" is loading...<div class="progress"><div class="progress-bar progress-bar-warning progress-bar-striped active" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">	<span class="sr-only">Loading</span>  </div></div></li>';
		$("#loadingList").append($li);
		return this;
	},
	readyFile : function(file){
		$("#loadingList").find("li[data-file="+file+"]").remove();
		preloaderXHR.counter--;
		if (preloaderXHR.counter == 0)
			preloaderXHR.allow = true;
		preloaderXHR.end()
	},
	start : function(){
		$("#preloader").fadeIn();
	},
	end : function(){
		setTimeout(function(){$("#preloader").fadeOut()}, 500)
	}
}

/*
function a(){log("a");throw "asd"}
try{log("try");a()}
catch(e){log("catch",e)}*/

//-------------- Extends
jQuery.fn.extend({
	//propAttr: $.fn.prop || $.fn.attr
});


//-------------- XHR Functions
function getJsonFile(name, path, callback){
	var allText = null;
	var xhr = new XMLHttpRequest();
	preloaderXHR.add(name);
	xhr.overrideMimeType("application/json");
	xhr.onreadystatechange = function (){
		//console.log(xhr.responseURL, xhr.readyState)
		//preloaderXHR.change(xhr);
		/*if(xhr.readyState === 3){
			console.log(xhr.responseURL, xhr.readyState);
		}*/
		if(xhr.readyState === 4){
			if(xhr.status === 200){
				allText = xhr.responseText;
				console.log(xhr)
				//console.log(allText);
				ICD[name] = parse(allText);
				preloaderXHR.readyFile(name);
			}
			else{
				throw new Error(xhr.responseURL);
				//return new Error(xhr.responseURL);
			}
		}
	}
	xhr.open("GET", 'json/' + name + '.json', false);
	xhr.send(null);
}
function getLang(lang){
	var xhr = new XMLHttpRequest();
	xhr.open("GET", 'lang/' + lang + '.json', false);
	xhr.onreadystatechange = function (){
		if(xhr.readyState === 4){
			if(xhr.status === 200 || xhr.status == 0){
				var text = xhr.responseText;
				Lang.text = JSON.parse( text );
				angular.module('multiLang', []).controller('TranslateController', function($scope) {
					$scope.ml = Lang.text;
				});
			}else	console.log(xhr)
		}else	console.log(xhr)
	}
	xhr.send(null);
	//return JSON.parse( lang );
}
//-------------- Functions
function counter(){//main count function
	var n = 0;
	return {
		count : function(){ return n++; },
		reset : function(){ n = 0 }
	};
};
function alphabet(){
	var el = this;
	//console.log(el);
	for (var i=65; i<91; i++){
		letter = String.fromCharCode(i);
		op = document.createElement('option');
		op.setAttribute('value', letter);
		op.innerHTML = letter;
		el.append(op);
	}
}
function formCatalog(list, element, ind, letters){
	console.log('formCatalog');
	catalog = this.find('ul');
	catalog.empty();
	switch(element) {
	case 'diagnose':
		for(n in list){
			li = $('<li>' + list[n].l + '.' + list[n].n1 + '.' + list[n].n2 + ' ' + list[n].label + '</li>');
			li.attr({
				'class': 'element list-group-item',
				'element' : element,
				'l' : list[n].l,
				'n1' : list[n].n1,
				'n2' : list[n].n2,
				'number' : n
			})
			catalog.append(li);
		}
		break;
	case 'nosology':
		for(n in list){
			var span  = "";
			if ( ICD.count ){
				var count = ICD.count.nosology[list[n].l + list[n].n1];
				var span = '<span class="badge pull-right">' + count + '</span>';
			}
			li = $('<li>' + span + '' + list[n].l + '.' + list[n].n1 + ' ' + list[n].label + '</li>');
			li.attr({
				'class': 'element list-group-item',
				'element' : element,
				'l' : list[n].l,
				'n1' : list[n].n1,
				'number' : n
			})
			catalog.append(li);
		}
		break;
	default:
		for(n in list){
			var span  = "";
			if ( ICD.count ){
				var count = ICD.count[element][list[n].l1 + list[n].n1 + list[n].l2 + list[n].n2];
				var span = '<span class="badge pull-right">' + count + '</span>';
			}
			li = $('<li>'+ span +'[' + list[n].l1 + '.' + list[n].n1 + '-' + list[n].l2 + '.' + list[n].n2 + '] ' + list[n].label + '</li>');
			li.attr({
				'class': 'element list-group-item',
				'element' : element,
				'l1' : list[n].l1,
				'n1' : list[n].n1,
				'l2' : list[n].l2,
				'n2' : list[n].n2,
				'number' : n
			})
			catalog.append(li);
		}
	}
	//console.timeEnd('form catalog');
}
function activeElement(el){
	if(el.hasClass("element")){
		el.parent().children(".active").removeClass("active");
		el.addClass("active");
	}
}
function slideCatalog(){
	//console.log('slide');
	//console.log(screen.width)
	//console.log(window.width)
	if (screen.width>690)
		$('#catalog').animate({"left" : -APP.width1*APP.stepCatalog});
	else
		$('#catalog').css("left",-APP.width1*APP.stepCatalog);
}
function searchBySelect(cat){
	//console.time('test');
	var result;
	letter = $('#letter').val();
	//console.log(letter);
	number1 = $('#number1a').val() + '' + $('#number1b').val();
	//console.log(number1);
	if (cat == 'nosologies'){
		nos = ICD.nosologies;
		for ( i in ICD.nosologies){
			if (ICD.nosologies[i].l == letter && ICD.nosologies[i].n1 == number1)
				result = ICD.nosologies[i].l +'.'+ ICD.nosologies[i].n1 +'. '+ ICD.nosologies[i].label;
		}
	}
	else{
		number2 = $('#number2').val();
		//console.log(number2);
		dis = ICD.diagnoses;
		for ( i in dis){
			if (dis[i].l == letter && dis[i].n1 == number1 && dis[i].n2 == number2)
				result = dis[i].l +'.'+ dis[i].n1 +'.'+ dis[i].n2 +'. '+ dis[i].label;
		}
	}
	$('#select_result').text(result);
	//console.timeEnd('test');
}
function selectValidate(){
	//console.log('validation begin');
	if ($('#letter').val() == '-'){
		//console.log('error letter');
		$('#select_result').text('Choose Letter');
	}
	else if ($('#number1a').val() == '-' || $('#number1b').val() == '-'){
		//console.log('error n1');
		$('#select_result').text('Choose N1 first and second numbers');
	}
	else if ($('#number2').val() == '-'){
		//console.log('error nosologies');
		searchBySelect('nosologies');
	}
	/*else if ($('#number2').val() == '-'){
		console.log('n2');
		$('#select_result').text('Choose N2 first and second numbers');
	}*/
	else searchBySelect('diagnoses');
}
function Width1(){
	APP.width1 = $("#catalog-wrapper").width();
	$(".list").width(APP.width1-2);
	//console.log('w1',APP.width1);
}
function Width2(){
	APP.width2 = $('#autocomplete').outerWidth();
	//console.log('w2',APP.width2);
}
function lifeSearch(){
	var q = 0;
	$( "#autocomplete" ).autocomplete({
		//source: ICD.nosologies,
		autoFocus: true,
		source: ICD[$("#changeSource button.active").attr("source")] || ICD.diagnoses,
		minLength: 3,
		focus: function( event, ui ) {
			console.log('focus');
			console.log(event)
			if (event.toElement)
				return;
			pos = $('.ui-state-focus').offset();
			$(window).scrollTop( pos.top - $(window).height()/2 );
		},
		select: function( event, ui ) {
			//console.log(ui.item.l);
			//number = nosologies.indexOf(ui.item.value);
			item = ICD.nosologies[ui.item.value];
			if (ui.item.n2)
				$( "#result" ).text( ui.item.l+'.'+ui.item.n1+'.'+ui.item.n2+' '+ui.item.label );
			else
				$( "#result" ).text( ui.item.l+'.'+ui.item.n1+' '+ui.item.label );
			//$( "#autocomplete" ).val( item.l+'.'+item.n1+'.'+item.n2+' '+item.name );
			$( "#autocomplete-id" ).val( ui.item.l2 );
			$( "#autocomplete-description" ).html( ui.item.n1 );
			// $( "#autocomplete-icon" ).attr( "src", "images/" + ui.item.icon );
			return false;
		},
		search: function(){
			console.time('FastSearching');
		},
		response: function(){
			console.timeEnd('FastSearching');
			console.time('FastDrawing');
		},
		open: function(){
			console.timeEnd('FastDrawing');
		},
		create: function(){
			$(this).data('ui-autocomplete')._renderItem = function( ul, item ){
				q++;
				var type;
				switch (q){
					case 0:type='success';break;
					case 1:type='info';break;
					case 2:type='warning';break;
					case 3:type='danger';break;
				}
				type = 'list-group-item-' + type;
				if (q == 3) q=0;
				//ul.css('width',0)
				return $( "<li>" )
					//.append( item.l + "." + item.n1 + '.' + item.n2 + ' ' +	item.label )
					.append( item.label )
					.addClass('list-group-item')
					.addClass(type)
					.appendTo( ul )
					//.parent()
					//.addClass('list-group-item col-xs-4')
					//.css('width',0);
			},
			$(this).data('ui-autocomplete')._resizeMenu = function( ul, item ){
				//this.menu.element.outerWidth(APP.width2);
				this.menu.element.width(APP.width2-2);
			}
		}
	});
}
function check(){
	var check = 'check';
	try {
		storage.setItem(check, check);
		storage.removeItem(check);
		return true;
	} catch(e) {
		return false;
	}
};
checkStorage = check;
function cache(){
	log("??? Check Cache");
	var no = "";
	var text = "Ваш бразуер " + no + "підтримує веб-додаток";
	applicationCache
		? (function(){
				log(text);
			})()
		: (function(){
				no = "no";
				log(text);
			})();
	$("#localCheck").append(text);
}
function safeBD(text){
	console.log("safe BD");
	ICD.version = version;
	storage['ICD'] = encode(ICD);
	//if (text)
		$("#localCheck").append(text);
	$("#localCheck").append("\n\r(v.", version,")");
}
function loadBD(text){//list of file JSON to load
	console.log('loading BD');
	
		console.time('count');
		/*ICD.count = */
		getJsonFile('count');
		//timer(function(){getJsonFile('count');},1000)
		console.timeEnd('count');
		
		console.time('classes');
		/*ICD.classes = */getJsonFile('classes');
		console.timeEnd('classes');
		
		console.time('blocks');
		/*ICD.blocks = */getJsonFile('blocks');
		console.timeEnd('blocks');
		
		console.time('nosologies');
		/*ICD.nosologies = */getJsonFile('nosologies');
		console.timeEnd('nosologies');
		
		console.time('diagnoses');
		/*ICD.diagnoses = */getJsonFile('diagnoses');
		console.timeEnd('diagnoses');
		
		setTimeout(safeBD.call(text), 0)
		//safeBD(text);
}
function BD(){
	var BD = true;//allow save BD
	var text;
	if(check() == true && BD == true){//localStorage is available on device 
		local = storage['ICD'];
		//log("storage is available")
		if (!local){// BD not saved and will loading
			log("no BD - loading")
			loadBD("<br/>База даних завантажена і збережена на вашому пристрої");
		}else{//BD saved
			ICD = parse(local);
			if(!ICD.version || ICD.version != version){//BD is old
				log("old version - loading");
				loadBD("<br/>База даних присутня на вашому пристрої є акутальною і не потребує оновлення");
			}
			else{//BD is up to date
				console.log("BD up to date, version:",version)
				ICD = parse(local);
				log(ICD);
				$("#localCheck").append("<br/>База даних присутня на вашому пристрої є акутальною і не потребує оновлення");
			}
		}
	}
	else{
		loadBD("<br/>Ваш браузер чи пристрій не підтримує збереження даних");
		//storage.clear();
	}
}
function loadLang(lang, callback){
	angular.module('multiLang', []).controller('TranslateController', function($scope, $http) {
		$http.get('lang/'+ lang +'.json').success(function(data) {
			//$scope.ml = data;
			Lang.text = data;
			if(callback)
				callback();
		});
		//$scope.ml = Lang.text;
	});
}
function Translate(lang){
	var LangBD = true;//allow save Language BD
	
	log("??? Check Lang: "+lang);
	angular.module('multiLang', []).controller('TranslateController', function($scope, $http) {
		if(storage.Lang && LangBD == true){
			Lang = parse(storage.Lang);
			$scope.ml = Lang.text;
			console.log("Translate");
		}
		else{
			console.log("Loading Lang");
			/*$http.get('lang/'+ lang +'.json').success(function(data) {
				Lang.text = data;
				storage['Lang'] = encode(Lang);
				$scope.ml = Lang.text;
				console.log("Translate");
			});*/
			var xhr = new XMLHttpRequest();
			xhr.open("GET", 'lang/' + lang + '.json', false);
			xhr.send(null);
			var text = xhr.responseText;
			Lang.text = JSON.parse( text );
			storage['Lang'] = encode(Lang);
			$scope.ml = Lang.text;
			console.log("Translate");
		}
	});
}

//-------------- 
function callback(fncs){
	if (arguments.length == 0)
		return;
	console.log("======")
	console.log(arguments.length, arguments)
	var args = [];
	for(a = 0; a < arguments.length; a++){
		if (typeof arguments[a] == 'function'){
			args.push(arguments[a]);
		}
	}
	var fnc = args[0];
	fnc = args.shift();
	console.log(args)
	fnc.apply(this,args);
}
var cb = (clbk = (call = callback) );
function getStorage(){
	console.log("getStorage")
	
	//Lang = parse(storage.Lang);
	ICD = parse(storage.ICD);
	
	//cb.apply(this, arguments);
}
function translate(){
	console.log("translate");
	angular.module('multiLang', []).controller('TranslateController', function ml($scope, $http){
		$scope.ml = Lang.text;
	});
	/*angular.element($(window)).scope().ml();*/
}
function paint(){
	console.log("paint START ----")
	getStorage();
	translate();
	formCatalog.call($('#catalog1'), ICD.classes, 'class', 0);
	Width1();
	Width2();
	console.log("paint END ----")
}
function getLang(){
	console.log("getLang");
	var lang = navigator.language.slice(0,2);
	console.log(lang);
	return lang;
}
function safe(name, obj){
	storage[name] = encode(obj);
	return true;
}
function safeLang(){
	console.log("safe Lang");
	safe("Lang",Lang);
	//storage["Lang"] = encode(Lang);
}
function checkLoad(xhr, callback){
	log("checkLoad")
			if(xhr.readyState === 4){
				if(xhr.status === 200){
					console.log("Version READY");
					// callback.apply();
				}
				else{
					log("FAIL")
					var z = counter()
					log(z.count())
				}
			}
}
/*!---------------------*/
function download(name, path, sync, callback){
	var path = path || "";
	console.log("......download: " + path + name + ".json")
	var r = new XMLHttpRequest();
	r.overrideMimeType("application/json");
	r.timeout = 30000;
	r.open("GET", path + name + '.json', sync || true);
	r.send(null);
	if (sync === false){
		log("async")
		return r;
	}
	else {
		log("sync")
		r.onreadystatechange = function(){
			checkLoad(r, callback)
		}
	}
}
function downloadVersion(){
	console.log("...Download_Version");
	var d = $.Deferred(),
		xhr = download("version", "", true);
		//xhr = new XMLHttpRequest();
	xhr.onload = function(){
		if(xhr.status === 200){
			console.log("Version READY");
			version = parse(xhr);
			log(version);
	//return d.promise();
		}
		else{
			new Error("!= Download_Version Failed")
			log("FAIL")
			var z = counter()
			log(z.count())
		}
	}
	setTimeout(function() { d.resolve(); }, 3000);
	return d.promise();
}
function downloadLang(callback){
	console.log("...Download_Lang");
	var lang = getLang(),
		xhr = download(lang, "lang/");
	xhr.onload = function(){
		// if(xhr.readyState === 4){
			if(xhr.status === 200){
				console.log("---------Lang READY");
				var json = xhr.responseText;
				Lang = parse(json);
				translate();
				safeLang();
			}
			else{
			}
		// }
	}
}
//-------------- MODES
function FIRST_BOOT_MODE(update){
	console.log("|---> ----> FIRST_BOOT_MODE");

	/*function test() {
	  var d = $.Deferred();
	  setTimeout(function() { d.resolve(); }, 3000);
	  return d.promise();
	}

	var t = test().done(function() { alert("время истекло"); });
*/
/*// пытаемся добавить задачу уже после выполнения
setTimeout(function() {
  alert("добавляем задачу поздно");
  t.done(function() { alert("выполнено"); });
}, 5000);
*/
	//if (!update) {downloadVersion()};


// создадим новый объект Deferred, установив на него обработчик
// успешного выполнения
/*var newDeferred = $.Deferred(function(obj){
	downloadVersion();	
  obj.done(downloadLang());
});*/
	downloadVersion()/*.promise()*/.done(function(){downloadLang()});
}
function SECOND_BOOT_MODE(){
	console.log("|---> ----> SECOND_BOOT_MODE");
	paint();
}
function STORAGE_MODE(){
	console.log("|---> STORAGE_MODE");
	storage.Version
		? SECOND_BOOT_MODE() 
		: FIRST_BOOT_MODE();
	/*if (!storage.ICD){
		SECOND_BOOT_MODE();
	}
	else{
		FIRST_BOOT_MODE();
	}*/
}
function NO_STORAGE_MODE(){
	console.log("|---> NO_STORAGE_MODE");
	
}
function ONLINE_MODE(){
	console.log("| ONLINE_MODE")
	checkStorage 
		? STORAGE_MODE() 
		: NO_STORAGE_MODE()
	/*if (checkStorage){
		STORAGE_MODE();
	}
	else{
		NO_STORAGE_MODE();
	}*/
}
function OFFLINE_MODE(){
	console.log("| OFFLINE_MODE")
	paint();
	lifeSearch();
	cb.apply(this, arguments);
}
//-------------- HANDLER
function APP_INIT(){
	console.log("| APP_INIT")
	var online = navigator.onLine;
	console.log("online^ ", online)
	online 
		? ONLINE_MODE() 
		: OFFLINE_MODE()
	/*online 
		? ONLINE_MODE(
			checkStorage 
				? STORAGE_MODE(
					!storage.ICD
						? SECOND_BOOT_MODE() 
						: FIRST_BOOT_MODE()
				) 
				: NO_STORAGE_MODE()
		) 
		: OFFLINE_MODE()*/
}

//-------------- Event handlers
//$(document).ready(function() {
$( window ).resize(function(){
	Width1()
	slideCatalog(APP.stepCatalog)
	Width2()
});
/* ACTions */
$('select.numbers').each(function(){
	for(var i=0; i<10; i++){
		var op = document.createElement('option');
		op.setAttribute('value', i) ;
		op.innerHTML = i;
		this.appendChild(op)
	}
});
$('#selectSearchSubmit').click(function(){selectValidate()});
$('.selDisNum').change(function(){
	numbers = [];
	letter = $('#letter').val();
	number1 = $('#number1a').val() + '' + $('#number1b').val();
	dis = ICD.diagnoses;
	for ( i in dis){
		if (dis[i].l == letter && dis[i].n1 == number1)
			numbers.push( ICD.diagnoses[i].n2 );
	}
	el = $('#number2');
	el.find('option').remove();
	op = document.createElement('option');
	op.setAttribute('value', '-') ;
	op.innerHTML = '-';
	el.append(op);
	for ( i in numbers){
		op = document.createElement('option');
		op.setAttribute('value', numbers[i]) ;
		op.innerHTML = numbers[i];
		el.append(op);
	}
	//console.log(numbers);
});
$('.icd_select').change(function(){
	//console.log('changed');
	select_code = $('#letter').val() + '.' + $('#number1a').val() + $('#number1b').val() + '.' + $('#number2').val();
	$('#select_code').text(select_code);
});
$('body').on('click', '#catalog-wrapper .backCatalog', function() {
	APP.stepCatalog--;
	slideCatalog(APP.stepCatalog);
});
$('body').on('click', '#catalog-wrapper li.element', function() {
	element = $(this).attr('element');
	ind = $(this).attr('number');
	newElements = [];
	//if ( element != 'diagnose')
		activeElement( $(this) );
	if ( element == 'class' || element == 'block' ){
		l1 = $(this).attr('l1');
		code1 = l1.charCodeAt(0);//console.log('c1',code1);
		n1 = $(this).attr('n1');
		l2 = $(this).attr('l2');
		code2 = l2.charCodeAt(0);//console.log('c2',code2);
		n2 = $(this).attr('n2');
		if ( element == 'class' ){
			for (n in ICD.blocks){
				char1 = ICD.blocks[n].l1.charCodeAt(0);//console.log('ch1',char1);
				char2 = ICD.blocks[n].l2.charCodeAt(0);//console.log('ch2',char2);
				if ( char1 >= code1 && char2 < code2 
					|| char1 >= code1 && char2 <= code2 
					&& ICD.blocks[n].n1 >= n1 && ICD.blocks[n].n1 <= n2 && ICD.blocks[n].n2 >= n1 && ICD.blocks[n].n2 <= n2  ){
						//console.log(ICD.blocks[n].l1,ICD.blocks[n].n1,ICD.blocks[n].l2,ICD.blocks[n].n2,ICD.blocks[n].label);
						newElements.push(ICD.blocks[n])
					
				}
			}
			//count = newElements.length;
			//console.log(count);
			formCatalog.call($('#catalog2'), newElements, 'block', ind);
		}
		else{
			for (n in ICD.nosologies){
				char0 = ICD.nosologies[n].l.charCodeAt(0);
				if ( char0 >= code1 && char0 <= code2 && ICD.nosologies[n].n1 >= n1 && ICD.nosologies[n].n1 <= n2)
					//console.log(ICD.nosologies[n].l,ICD.nosologies[n].n1,ICD.nosologies[n].label);
					newElements.push(ICD.nosologies[n])
			}
			//count = newElements.length;
			//console.log(count);
			formCatalog.call($('#catalog3'), newElements, 'nosology', ind);
		}
	}
	else if( element == 'nosology' ){
		l = $(this).attr('l');//console.log(l)
		n1 = $(this).attr('n1');//console.log(n1)
		for ( n in ICD.diagnoses){
			if (ICD.diagnoses[n].l == l && ICD.diagnoses[n].n1 == n1)
				//console.log(ICD.diagnoses[n].l,ICD.diagnoses[n].n1,ICD.diagnoses[n].n2,ICD.diagnoses[n].label);
				newElements.push(ICD.diagnoses[n])
		}
		//count = newElements.length;
		//console.log(count);
		formCatalog.call($('#catalog4'), newElements, 'diagnose', ind);
	}
	else return
	newElements.length = 0;
	height = $('.navbar-fixed-top').height();
	pos =  $('#catalog').offset();
	if ( ($(window).scrollTop() + height) > pos.top) 
		$(window).scrollTop( pos.top - height );
	APP.stepCatalog++;
	slideCatalog(APP.stepCatalog);
});
$('#tab_menu button').click(function (e) {
	e.preventDefault()
	if ($(this).hasClass('active')) return;
	$('#tab_menu .active').toggleClass('active')
	$(this).toggleClass('active');
	$('#content>.active').toggleClass('active').toggleClass('hidden-xs').toggleClass('hidden-sm');
	//$('#'+$(this).attr('aria-controls')).toggleClass('active');hidden-xs
	$($(this).attr('data-id')).toggleClass('active').toggleClass('hidden-xs').toggleClass('hidden-sm');
	Width1()
	Width2()
});
$("#changeSource button").click(function(){
	$("#changeSource .active").removeClass("active");
	$(this).addClass("active");
	source = $(this).attr("source");
	if (!ICD.all){ ICD.all = ICD.nosologies.concat(ICD.diagnoses)};
	$( "#autocomplete" ).autocomplete('option', 'source', ICD[source]);
});
//});

// Function.prototype.after = function () {
// 	/**
// 	 * @var onReady - это наша ф-ция, которая будет выпонлятся по завершению всех вызовов
// 	 * @var after   - это хэш функций, которые должны быть выполнены.
// 	 *	 именно его свойства мы передаём как колбеки (process.fs и process.db)
// 	 * @var ready - здесь мы будем хранить ответы каждой функции и когда все ключи,
// 	 *	 которые есть в after будут и тут - значит, пора вызывать onReady
// 	 */
// 	var onReady = this, after = {}, ready = {};
// 	var checkReady = function () {
// 		for (var i in after) if (!(i in ready)) return;
// 		log(typeof onReady)
// 		onReady(ready);
// 	};
// 	for (var i = 0, l = arguments.length; i < l; i++) {
// 		(function (key) {
// 			after[key] = function () {
// 				ready[key] = arguments;
// 				checkReady();
// 			};
// 		})(arguments[i]);
// 	}
// 	ready = {};
// 	return after;
// };
// function asyncFsAccess(a, c){
// 	console.log(a)
// 	if (c) c()
// };
// function asyncDbAccess(b, c){
// 	console.log(b)
// 	if (c) c()
// };
// function processFsAndDb(){
// 	console.log("done",arguments);
// }

// var process = processFsAndDb.after('fs', 'db');
// asyncFsAccess( 1, process.fs);
// asyncDbAccess( 2, process.db);


/*!BEGIN*/
//-------------- Handler
(function handler(){
	log("------ Docuemnt Not Ready");
	APP_INIT();
	//cache();
	//getVersion();
	//Translate(Lang.lang);
	//BD();
	//getLang(Lang.lang);
	//alphabet.call($('#letter'));
	//formCatalog.call($('#catalog1'), ICD.classes, 'class', 0);
})()
document.addEventListener("DOMContentLoaded", function(event) { 
	log("------ Document Ready");
});
window.onload = function(){
	log("------ Window Loaded");
	//BD();
	/*if(!preloaderXHR.check())
		return;
	else
		preloaderXHR.end();*/
//formCatalog.call($('#catalog1'), ICD.classes, 'class', 0)
	
	//setTimeout(formCatalog.call($('#catalog1'), ICD.classes, 'class', 0), 0)
	//Width1();
	//Width2();
	//lifeSearch();
};
/*!----------- COUNTER for MENU -----------*/
/*
// COUNTER for MENU
 _count = {
	class : {},
	block : {},
	nosology : {}
};
function getCount(){
	classCount = counter();
	blockCount = counter();
	nosCount = counter();
	
	//count Blocks for Classes
	for (var inc = 0; inc < ICD.classes.length; inc++){

		var l1 = ICD.classes[inc]['l1'];
		var code1 = l1.charCodeAt(0);//console.log('c1',code1);
		var n1 = ICD.classes[inc]['n1'];
		var l2 = ICD.classes[inc]['l2'];
		var code2 = l2.charCodeAt(0);//console.log('c2',code2);
		var n2 = ICD.classes[inc]['n2'];

		for (z = 0; z < ICD.blocks.length; z++){
			
			var char1 = ICD.blocks[z].l1.charCodeAt(0);//console.log('ch1',char1);
			var char2 = ICD.blocks[z].l2.charCodeAt(0);//console.log('ch2',char2);
			if ( char1 >= code1 && char2 < code2 
				|| char1 >= code1 && char2 <= code2 
				&& ICD.blocks[z].n1 >= n1 && ICD.blocks[z].n1 <= n2 
				&& ICD.blocks[z].n2 >= n1 && ICD.blocks[z].n2 <= n2  ){
					
					classCount.count()
			}
		}
		
		var link = ICD.classes[inc];
		var code = link.l1 + link.n1 + link.l2 + link.n2;
		_count.class[code] = classCount.count();
		classCount.reset()
		console.log("class",code,'has:',_count.class[code])
		
	}

	//count Nosologies for Blocks
	for (var z = 0; z < ICD.blocks.length; z++){

		var bl1 = ICD.blocks[z]['l1'];
		var bcode1 = bl1.charCodeAt(0);//console.log('c1',code1);
		var bn1 = ICD.blocks[z]['n1'];
		var bl2 = ICD.blocks[z]['l2'];
		var bcode2 = bl2.charCodeAt(0);//console.log('c2',code2);
		var bn2 = ICD.blocks[z]['n2'];

		for (var j in ICD.nosologies){
			bchar0 = ICD.nosologies[j].l.charCodeAt(0);
			if ( bchar0 >= bcode1 && bchar0 <= bcode2 
				&& ICD.nosologies[j].n1 >= bn1 
				&& ICD.nosologies[j].n1 <= bn2 ){

				blockCount.count();
			}
		}

		var link = ICD.blocks[z];
		var code = link.l1 + link.n1 + link.l2 + link.n2;
		_count.block[code] = blockCount.count();
		blockCount.reset()
		if (_count.block[code] == 0)
			console.log(z,"block",code,'has:',_count.block[code]);
		//console.log(z,"block",code,'has:',_count.block[code])
		
	}
	
	//count Diagnoses for Nosologies
	for (var k = 0; k < ICD.nosologies.length; k++){
		
		var l = ICD.nosologies[k]['l'];//console.log(l)
		var n1 = ICD.nosologies[k]['n1'];//console.log(n1)

		for ( n in ICD.diagnoses){
			if (ICD.diagnoses[n].l == l && ICD.diagnoses[n].n1 == n1){
				nosCount.count();
			}
		}
		var link = ICD.nosologies[k];
		var code = link.l + link.n1;
		_count.nosology[code] = nosCount.count();
		nosCount.reset()
		if (_count.nosology[code] == 0)
			console.log(k,"nosology",code,'has:',_count.nosology[code]);
		//console.log(k,"nosology",code,'has:',_count.nosology[code])
	}
	
	ICD.count = _count
};

setTimeout(getCount.call(0), 0)
*/